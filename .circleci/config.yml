version: 2.1
#reusable executors: define build environment (container or vm) that can be used to run any job(s) in this config
executors:
  node:
     docker:
      - image: cimg/node:15.6.0
 
orbs:
  heroku: circleci/heroku@1.2.6
  gcp-gcr: circleci/gcp-gcr@0.13.0
  gcp-gke: circleci/gcp-gke@1.3.0
  snyk: snyk/snyk@1.1.2


#orchestrate jobs: define dependencies, run order, and approval 
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - hold-heroku-deploy:
          type: approval
          requires:
            - lint
            - test
          filters: 
            branches:
              only: /^staging-.*/
      - heroku/deploy-via-git:
          requires: 
            - hold-heroku-deploy
          filters:
            branches:
              only: /^staging-.*/
      - build-push-docker-image:
          requires:
            - lint
            - test
      - hold-gke-deploy:
          type: approval
          requires:
            - build-push-docker-image
          filters:
            branches:
              only: main
      - gke-deploy:
          requires:
            - hold-gke-deploy
          filters:
            branches:
              only: main

# reusable commands: can be called as steps in any job(s) in this config
commands:
  installnode:
    description: "Install and cache node"
    steps:
      - checkout
      - run: 
          name: Node Version
          command: node --version
      - restore_cache:
          keys: 
            - dependency-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - dependency-cache-v1-{{ .Branch }}
            - dependency-cache-v1-
      - run: 
          name: NPM Install
          command: npm install --legacy-peer-deps
      - snyk/scan:
          fail-on-issues: false 
      - save_cache:
          paths:
            - ./node_modules
          key: dependency-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}  
# builing blocks of ci/cd
jobs:
  build:
    executor: node
    steps:
      - installnode

  lint: 
    executor: node
    resource_class: small
    steps:
      - installnode
      - run:
          name: Run Linting
          command: npm run lint

  test: 
    parallelism: 4
    executor: node
    resource_class: large
    steps:
      - installnode 
      - run: mkdir ~/junit
      - run: 
          name: Run Tests
          command: |
            TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split --split-by=timings)
            npm run test:coverage $TEST
      - run: 
          command: cp test-results/junit.xml ~/junit
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  # build dcker image then push image to GCR
  build-push-docker-image:
    description: build and push image to Google Container Registry
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - gcp-gcr/gcr-auth
      - gcp-gcr/build-image:
          image: cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} #Change version number when updating app, ie. v2
      - snyk/scan:
          severity-threshold: high
          docker-image-name: ${GOOGLE_PROJECT_ID}/cci-react-demo-app:${tag}
          target-file: "Dockerfile"
          fail-on-issues: true
      - gcp-gcr/push-image:
          image: cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} #Change version number when updating app, ie. v2
      - store_artifacts:
          path: /bin/app_build
  #Deploy app to GKE
  gke-deploy:
    description: Deploy application to Google Kubernetes Engine
    machine: true
    resource_class: large
    steps:
      - gcp-gcr/gcr-auth
      # Install `gcloud` and `kubectl` if not already installed.
      - gcp-gke/install
      # Update a deployment Docker image.
      - gcp-gke/rollout-image:
          cluster: circle-ci-cluster
          deployment: react-circle-prod
          container: cci-react-demo-app
          image: gcr.io/optimal-sentry-327419/cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} 












###########################################################################################################################
## setup workflows ##
# version: 2.1 

# setup: true

# orbs:
#   path-filtering: circleci/path-filtering@0.0.2

# workflows:
#   setup-workflow:
#     jobs:
#       - path-filtering/filter:
#           mapping: |
#             src/.* test-src true
#             back-end/.* back-end true
#             .circleci/.* circle-ci true
#             kubernetes/.* kubes true 
#           # Optional, defaults to main:
#           base-revision: origin/main