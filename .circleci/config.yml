version: 2.1
#reusable executors: define build environment (container or vm) that can be used to run any job(s) in this config
executors:
  node:
     docker:
      - image: cimg/node:15.6.0
 
orbs:
  heroku: circleci/heroku@1.2.6
  gcp-gcr: circleci/gcp-gcr@0.13.0
  gcp-gke: circleci/gcp-gke@1.3.0
  slack: circleci/slack@4.4.4
  # snyk: snyk/snyk@1.1.2
  snyyyk:
    commands:
      scan: 
        description: Scan the application dependencies for known vulnerabilities with Snyk. This command calls the others, and should be used as the command for scanning.
        parameters:
          additional-arguments:
            default: ''
            description: Refer to the Snyk CLI help page for information on additional arguments.
            type: string
          command:
            default: test
            description: |
              The Snyk command to call, i.e. "test" or "iac test"
            type: string
          docker-image-name:
            default: ''
            description: 'The image name, if scanning a container image'
            type: string
          fail-on-issues:
            default: true
            description: >-
              This specifies if builds should be failed or continued based on issues
              found by Snyk.
            type: boolean
          install-alpine-dependencies:
            default: true
            description: Install additional dependencies required by the alpine cli
            type: boolean
          monitor-on-build:
            default: true
            description: >-
              Take a current application dependencies snapshot for continuous monitoring
              by Snyk, if test was succesful.
            type: boolean
          organization:
            default: ''
            description: >
              Name of the Snyk organisation name, under which this project should be
              tested and monitored If omitted the default organization will be used.
            type: string
          os:
            default: linux
            description: The CLI OS version to download
            enum:
              - linux
              - macos
              - alpine
            type: enum
          project:
            default: ''
            description: >
              A custom name for the Snyk project to be created on snyk.io. If omitted a
              default-generated project name will be used.
            type: string
          protect:
            default: false
            description: >-
              Protect the app by applying patches specified in your .snyk file (after
              running the Snyk wizard)
            type: boolean
          severity-threshold:
            default: low
            description: >-
              Only report vulnerabilities of provided level or higher
              (low/medium/high/critical). Default is low.
            enum:
              - low
              - medium
              - high
              - critical
            type: enum
          target-file:
            default: ''
            description: >-
              The path to the manifest file to be used by Snyk. Should be provided if
              non-standard.
            type: string
          token-variable:
            default: SNYK_TOKEN
            description: >
              Name of env var containing your Snyk API token. Pass this as a raw string
              such as CICD_SNYK_TOKEN. Do not paste the actual token into your
              configuration. If omitted it's assumed the CLI has already been setup with
              a valid token beforehand.
            type: env_var_name
        steps:
          - run:
              command: >
                if [[ ! -x "/usr/local/bin/snyk" ]]; then
                  if [[ "<<parameters.os>>" == "alpine" && "<<parameters.install-alpine-dependencies>>" == "true" ]]; then
                    apk add -q --no-progress --no-cache curl wget libstdc++ sudo
                  fi
                  LATEST_SNYK_CLI_VERSION=$(curl https://static.snyk.io/cli/latest/version)
                  echo "Downloading Snyk CLI version ${LATEST_SNYK_CLI_VERSION}"
                  curl -sO https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-<<parameters.os>>
                  curl -sO https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-<<parameters.os>>.sha256
                  sha256sum -c snyk-<<parameters.os>>.sha256
                  sudo mv snyk-<<parameters.os>> /usr/local/bin/snyk
                  sudo chmod +x /usr/local/bin/snyk
                fi

                snyk config set disableSuggestions=true

                <<#parameters.token-variable>>snyk auth
                $<<parameters.token-variable>><</parameters.token-variable>>
              environment:
                SNYK_INTEGRATION_NAME: CIRCLECI_ORB
                SNYK_INTEGRATION_VERSION: 1.1.2
              name: Download Snyk CLI
          - when:
              condition: <<parameters.protect>>
              steps:
                - run:
                    command: |
                      snyk protect <<parameters.additional-arguments>>
                    environment:
                      SNYK_INTEGRATION_NAME: CIRCLECI_ORB
                      SNYK_INTEGRATION_VERSION: 1.1.2
                    name: Run Snyk protect to apply patches from .snyk file
          - run:
              command: >
                snyk <<parameters.command>> <<#parameters.docker-image-name>>--docker
                <<parameters.docker-image-name>><</parameters.docker-image-name>>
                <<#parameters.severity-threshold>>--severity-threshold=<<parameters.severity-threshold>><</parameters.severity-threshold>>
                <<#parameters.organization>>--org=<<parameters.organization>><</parameters.organization>>
                <<#parameters.target-file>>--file=<<parameters.target-file>><</parameters.target-file>>
                <<parameters.additional-arguments>> <<^parameters.fail-on-issues>> ||
                true<</parameters.fail-on-issues>>
              environment:
                SNYK_INTEGRATION_NAME: CIRCLECI_ORB
                SNYK_INTEGRATION_VERSION: 1.1.2
              name: Run Snyk
          - when:
              condition: <<parameters.monitor-on-build>>
              steps:
                - run:
                    command: >
                      snyk monitor <<#parameters.docker-image-name>>--docker
                      <<parameters.docker-image-name>><</parameters.docker-image-name>>
                      <<#parameters.project>>--project-name=<<parameters.project>><</parameters.project>>
                      <<#parameters.organization>>--org=<<parameters.organization>><</parameters.organization>>
                      <<#parameters.target-file>>--file=<<parameters.target-file>><</parameters.target-file>>
                      <<parameters.additional-arguments>>
                    environment:
                      SNYK_INTEGRATION_NAME: CIRCLECI_ORB
                      SNYK_INTEGRATION_VERSION: 1.1.2
                    name: Run Snyk monitor for continuous monitoring on snyk.io
#orchestrate jobs: define dependencies, run order, and approval 
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - hold-heroku-deploy:
          context: docker-hub-creds
          type: approval
          requires:
            - lint
            - test
          filters: 
            branches:
              only: /^staging-.*/
      - heroku/deploy-via-git:
          requires: 
            - hold-heroku-deploy
          filters:
            branches:
              only: /^staging-.*/
      - build-push-docker-image:
          requires:
            - lint
            - test
      - slack/on-hold:
          context: slack_creds
          requires:
            - build-push-docker-image
      - hold-gke-deploy:
          type: approval
          requires:
            - slack/on-hold
            - build-push-docker-image
          filters:
            branches:
              only: main
      - gke-deploy:
          requires:
            - hold-gke-deploy
          filters:
            branches:
              only: main

# reusable commands: can be called as steps in any job(s) in this config
commands:
  installnode:
    description: "Install and cache node"
    steps:
      - checkout
      - run: 
          name: Node Version
          command: node --version
      - restore_cache:
          keys: 
            - dependency-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - dependency-cache-v1-{{ .Branch }}
            - dependency-cache-v1-
      - run: 
          name: NPM Install
          command: npm install --legacy-peer-deps
      # - snyk/scan:
      #     fail-on-issues: false 
      - save_cache:
          paths:
            - ./node_modules
          key: dependency-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}  
# building blocks of ci/cd
jobs: 
  build:
    executor: node
    steps:
      - installnode

  lint: 
    executor: node
    resource_class: small
    steps:
      - installnode
      - run:
          name: Run Linting
          command: npm run lint

  test: 
    parallelism: 4
    executor: node
    resource_class: large
    steps:
      - installnode 
      - run: mkdir ~/junit
      - run: 
          name: Run Tests
          command: |
            TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split --split-by=timings)
            npm run test:coverage $TEST
      - run: 
          command: cp test-results/junit.xml ~/junit
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  # build dcker image then push image to GCR
  build-push-docker-image:
    description: build and push image to Google Container Registry
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - gcp-gcr/gcr-auth
      - gcp-gcr/build-image:
          image: cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} #Change version number when updating app, ie. v2
      - snyyyk/scan:
          severity-threshold: high
          docker-image-name: joebumbulis/cci-react-demo-app:v1
          target-file: "Dockerfile"
          fail-on-issues: false
      - gcp-gcr/push-image:
          image: cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} #Change version number when updating app, ie. v2
      - store_artifacts:
          path: /bin/app_build
  #Deploy app to GKE
  gke-deploy:
    description: Deploy application to Google Kubernetes Engine
    machine: true
    resource_class: large
    steps:
      - gcp-gcr/gcr-auth
      # Install `gcloud` and `kubectl` if not already installed.
      - gcp-gke/install
      # Update a deployment Docker image.
      - gcp-gke/rollout-image:
          cluster: circle-ci-cluster
          deployment: react-circle-prod
          container: cci-react-demo-app
          image: gcr.io/optimal-sentry-327419/cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} 












###########################################################################################################################
## setup workflows ##
# version: 2.1 

# setup: true

# orbs:
#   path-filtering: circleci/path-filtering@0.0.2

# workflows:
#   setup-workflow:
#     jobs:
#       - path-filtering/filter:
#           mapping: |
#             src/.* test-src true
#             back-end/.* back-end true
#             .circleci/.* circle-ci true
#             kubernetes/.* kubes true 
#           # Optional, defaults to main:
#           base-revision: origin/main