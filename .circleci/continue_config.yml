version: 2.1

orbs:
  continuation: circleci/continuation@0.1.2
  path-filtering: circleci/path-filtering@0.0.2
  heroku: circleci/heroku@1.2.6
  gcp-gcr: circleci/gcp-gcr@0.13.0
  gcp-gke: circleci/gcp-gke@1.3.0

executors:
  my-executor:
     docker:
      - image: cimg/node:15.6.0

parameters:
  circle-ci:
    type: boolean
    default: false
  test-src:
    type: boolean
    default: false
  back-end:
    type: boolean
    default: false
  kubes:
    type: boolean
    default: false

commands:
  installnode:
    description: "Install and cache node"
    steps:
      - checkout
      - run: 
          name: Node Version
          command: node --version
      - restore_cache:
          keys: 
            - dependency-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - dependency-cache-v1-{{ .Branch }}
            - dependency-cache-v1-
      - run: 
          name: NPM Install
          command: npm install --legacy-peer-deps  
      - save_cache:
          paths:
            - ./node_modules
          key: dependency-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}  

jobs:
  build:
    executor: my-executor
    steps:
      - installnode
  lint: 
    executor: my-executor
    resource_class: small
    steps:
      - installnode
      - run:
          name: Run Linting
          command: npm run lint
  test: 
    parallelism: 4
    executor: my-executor
    resource_class: large
    steps:
      - installnode 
      - run: mkdir ~/junit
      - run: 
          name: Run Tests
          command: |
            TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split --split-by=timings)
            npm run test:coverage $TEST
      - run: 
          command: cp test-results/junit.xml ~/junit
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  # build dcker image then push image to GCR
  build-push-docker-image:
    description: build and push image to Google Container Registry
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - gcp-gcr/gcr-auth
      - gcp-gcr/build-image:
          image: cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} #Change version number when updating app, ie. v2
      - gcp-gcr/push-image:
          image: cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} #Change version number when updating app, ie. v2
      - store_artifacts:
          path: /bin/app_build
  #Deploy app to GKE
  gke-deploy:
    description: Deploy application to Google Kubernetes Engine
    machine: true
    resource_class: large
    steps:
      - gcp-gcr/gcr-auth
      # Install `gcloud` and `kubectl` if not already installed.
      - gcp-gke/install
      # Update a deployment Docker image.
      - gcp-gke/rollout-image:
          cluster: circle-ci-cluster
          deployment: react-circle-prod
          container: cci-react-demo-app
          image: gcr.io/optimal-sentry-327419/cci-react-demo-app
          tag: v1-${CIRCLE_SHA1} 

  back-end:
    machine: true
    steps:
      - checkout
      - run: "echo 'Hello from module B!'"
      - run: cat back-end/README.md

workflows:
  circle-ci:
    when: << pipeline.parameters.circle-ci >> 
    jobs:
      - build

  kubes:
    when: << pipeline.parameters.kubes >>
    jobs:
      - build 

  back-end:
    when: << pipeline.parameters.back-end >> 
    jobs:
      - back-end
      - hold:
          type: approval
          requires:
            - back-end
          filters: 
            branches:
              only: main
      - heroku/deploy-via-git:
          requires: 
            - hold
          filters:
            branches:
              only: main
    
  test-src:
    when: << pipeline.parameters.test-src >>
    jobs:
      - build
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - build-push-docker-image:
          requires:
            - lint
            - test
      - hold-gke-deploy:
          type: approval
          requires:
            - build-push-docker-image
          filters:
            branches:
              only: main
      - gke-deploy:
          requires:
            - hold-gke-deploy
          filters:
            branches:
              only: main